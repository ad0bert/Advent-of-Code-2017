package advent.main;

public class Dec1Main {
    public static void main(String[] args) {
        System.out.println(calcCapture1("21752342814933766938172121674976879111362417653261522357855816"
                + "893656462449168377359285244818489723869987861247912289729579296691684761143544956991583"
                + "942215236568961875851755854977946147178746464675227699149925227227137557479769948569788"
                + "884399379821111382536722699575759474473273939756348992714667963596189765734743169489599"
                + "125771443348193383566159843593541134749392569865481578359825844394454173219857919349341"
                + "442148282229689541561169341622222354651397342928678496478671339383923769856425795211323"
                + "673389723181967933933832711545885653952861879231537976292517866354812943192728263269524"
                + "735698423336673735158993853556148833861327959262254756647827739145283577793481526768156"
                + "921138428318939361859721778556264519643435871835744859243167227889562738712953651128317"
                + "624673985213525897522378259178625416722152155728615936587369515254936828668564857283226"
                + "439881266871945998796488472249182538883354186573925183152663862683995449671663285775397"
                + "453876262722567452435914777363522817594741946638986571793655889466419895996924122915777"
                + "224499481496837343194149123735355268151941712871245863553836953349887831949788869852929"
                + "147849489265325843934669999391846286319268686789372513976522282587526866148166337215961"
                + "493536262851512218794139272361292811529888161198799297966893366553115353639298256788819"
                + "385272471187213579185523521341651117947676785341146235441411441813242514813227821843819"
                + "424619974979886871646621918865274574538951761567855845681272364646138584716333599843835"
                + "167373525248547542442942583122624534494442516259616973235858469131159773167334953658673"
                + "271599748942956981954699444528689628848694446818825465485122869742839711471129862632128"
                + "635779658365756362863627135983617613332849756371986376967117549251566281992964573929655"
                + "589313871976556784849231916513831538254812347116253949818633527185174221565279775766742"
                + "262687713114114344843534958833372634182176866315441583887177759222598853735114191874277"
                + "711434653854816841589229914164681364497429324463193669337827467661773833517841763711156"
                + "376147664749175267212562321567728575765844893232718971471289841171642868948852136818661"
                + "741238178676857381583155547755219837116125995361896562498721571413742"));

            System.out.println(calcCapture2("1212"));
            System.out.println(calcCapture2("1221"));
            System.out.println(calcCapture2("123425"));
            System.out.println(calcCapture2("123123"));
            System.out.println(calcCapture2("12131415"));


            System.out.println(calcCapture2("2175234281493376693817212167497687911136241765326152235785581"
                + "689365646244916837735928524481848972386998786124791228972957929669168476114354495699158"
                + "394221523656896187585175585497794614717874646467522769914992522722713755747976994856978"
                + "888439937982111138253672269957575947447327393975634899271466796359618976573474316948959"
                + "912577144334819338356615984359354113474939256986548157835982584439445417321985791934934"
                + "144214828222968954156116934162222235465139734292867849647867133938392376985642579521132"
                + "367338972318196793393383271154588565395286187923153797629251786635481294319272826326952"
                + "473569842333667373515899385355614883386132795926225475664782773914528357779348152676815"
                + "692113842831893936185972177855626451964343587183574485924316722788956273871295365112831"
                + "762467398521352589752237825917862541672215215572861593658736951525493682866856485728322"
                + "643988126687194599879648847224918253888335418657392518315266386268399544967166328577539"
                + "745387626272256745243591477736352281759474194663898657179365588946641989599692412291577"
                + "722449948149683734319414912373535526815194171287124586355383695334988783194978886985292"
                + "914784948926532584393466999939184628631926868678937251397652228258752686614816633721596"
                + "149353626285151221879413927236129281152988816119879929796689336655311535363929825678881"
                + "938527247118721357918552352134165111794767678534114623544141144181324251481322782184381"
                + "942461997497988687164662191886527457453895176156785584568127236464613858471633359984383"
                + "516737352524854754244294258312262453449444251625961697323585846913115977316733495365867"
                + "327159974894295698195469944452868962884869444681882546548512286974283971147112986263212"
                + "863577965836575636286362713598361761333284975637198637696711754925156628199296457392965"
                + "558931387197655678484923191651383153825481234711625394981863352718517422156527977576674"
                + "226268771311411434484353495883337263418217686631544158388717775922259885373511419187427"
                + "771143465385481684158922991416468136449742932446319366933782746766177383351784176371115"
                + "637614766474917526721256232156772857576584489323271897147128984117164286894885213681866"
                + "1741238178676857381583155547755219837116125995361896562498721571413742"));
    }
    private static int calcCapture1(String input) {
        int res = 0;
        for (int i = 0; i < (input.length() - 1); ++i) {
            short pos1 = Short.parseShort(String.valueOf(input.charAt(i)));
            short pos2 = Short.parseShort(String.valueOf(input.charAt(i + 1)));
            if (pos1 == pos2) {
                res += pos1;
            }
        }

        if (input.charAt(0) == input.charAt(input.length() - 1)) {
            res += Short.parseShort(String.valueOf(input.charAt(0)));
        }

        return res;
    }

    private static int calcCapture2(String input) {
        int stepSize = input.length() / 2;
        int res = 0;

        for (int i = 0; i < input.length(); ++i) {
            short pos1 = Short.parseShort(String.valueOf(input.charAt(i)));
            short pos2 = -1;

            if ((i + stepSize) >= input.length()) {
                pos2 = Short.parseShort(String.valueOf(input.charAt((stepSize + i)- (input.length()))));
            } else {
                pos2 = Short.parseShort(String.valueOf(input.charAt(i + stepSize)));
            }
            if (pos1 == pos2) {
                res += pos1;
            }
        }

        return res;
    }

}
